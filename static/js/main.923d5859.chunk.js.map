{"version":3,"sources":["assets/KIRILICATA.png","shlok.js","shlokontainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SHLOKMAP","а","б","в","г","д","е","ж","з","и","й","к","л","м","н","о","п","р","с","т","у","ф","х","ц","ч","ш","щ","ь","ъ","ю","я","!","ShloKontainer","_useState","useState","_useState2","Object","slicedToArray","content","setContent","react_default","a","createElement","className","rows","cols","value","onChange","event","target","split","map","letter","remapped","toLowerCase","remap_char","Array","isArray","Math","floor","random","length","toUpperCase","join","App","src","logo","alt","shlokontainer_ShloKontainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gOCAlCC,EAAW,CACbC,SAAK,IACLC,SAAK,IACLC,SAAK,CAAC,IAAK,KACXC,SAAK,IACLC,SAAK,IACLC,SAAK,IACLC,SAAK,CAAC,KAAM,KACZC,SAAK,IACLC,SAAK,IACLC,SAAK,CAAC,IAAK,KACXC,SAAK,IACLC,SAAK,IACLC,SAAK,IACLC,SAAK,IACLC,SAAK,IACLC,SAAK,CAAC,IAAK,KACXC,SAAK,IACLC,SAAK,IACLC,SAAK,IACLC,SAAK,IACLC,SAAK,IACLC,SAAK,CAAC,IAAK,KACXC,SAAK,CAAC,IAAK,MACXC,SAAK,IACLC,SAAK,CAAC,KAAM,KACZC,SAAK,CAAC,MAAO,MACbC,SAAK,IACLC,SAAK,IACLC,SAAK,KACLC,SAAK,CAAC,KAAM,MACZC,IAAK,CAAC,IAAK,KAAM,QC5BRC,EAAgB,WAAM,IAAAC,EACDC,mBAAS,+HADRC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACxBK,EADwBH,EAAA,GACfI,EADeJ,EAAA,GAG/B,OAAOK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAClBH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0GACAF,EAAAC,EAAAC,cAAA,YAAUE,KAAK,IAAIC,KAAK,KAAKC,MAAOR,EAASS,SAAU,SAACC,GAAD,OAAWT,EAAWS,EAAMC,OAAOH,QAAQH,UAAU,gBAEhHH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACFL,EDsBTY,MAAM,IAAIC,IAAI,SAAAC,GACtB,IAAMC,EAAWrD,EAASoD,EAAOE,eACjC,GAAID,EAAU,CACV,IAAIE,EAAaF,EAQjB,OAPIG,MAAMC,QAAQJ,KAEdE,EAAaF,EADCK,KAAKC,MAAMD,KAAKE,SAAWP,EAASQ,UAGlDT,IAAWA,EAAOU,gBAClBP,EAAaA,EAAWO,eAErBP,EAEX,OAAOH,IACRW,KAAK,QE/BGC,MAdf,WACE,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yJACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKuB,IAAKC,IAAMC,IAAI,WAGxB3B,EAAAC,EAAAC,cAAC0B,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.923d5859.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/KIRILICATA.570a3d4f.png\";","const SHLOKMAP = {\n    'а': 'a',\n    'б': 'b',\n    'в': ['v', 'w'],\n    'г': 'g',\n    'д': 'd',\n    'е': 'e',\n    'ж': ['zh', 'j'],\n    'з': 'z',\n    'и': 'i',\n    'й': ['j', 'y'],\n    'к': 'k',\n    'л': 'l',\n    'м': 'm',\n    'н': 'n',\n    'о': 'o',\n    'п': ['5', 'p'],\n    'р': 'r',\n    'с': 's',\n    'т': 't',\n    'у': 'u',\n    'ф': 'f',\n    'х': ['x', 'h'],\n    'ц': ['c', 'tz'],\n    'ч': '4',\n    'ш': ['sh', '6'],\n    'щ': ['sht', '6t'],\n    'ь': 'y',\n    'ъ': 'y',\n    'ю': 'yu',\n    'я': ['ya', 'ja'],\n    '!': ['!', '!1', '!1!']\n}\n\n\nexport const nashlok = (text) => {\n    return text.split('').map(letter => {\n        const remapped = SHLOKMAP[letter.toLowerCase()];\n        if (remapped) {\n            let remap_char = remapped;\n            if (Array.isArray(remapped)) {\n                const index = Math.floor(Math.random() * remapped.length);\n                remap_char = remapped[index];\n            }\n            if (letter === letter.toUpperCase()) {\n                remap_char = remap_char.toUpperCase();\n            }\n            return remap_char\n        }\n        return letter;\n    }).join('')\n}\n\n\n\n","import React, { useState } from 'react';\nimport { nashlok } from './shlok';\n\nexport const ShloKontainer = () => {\n    const [content, setContent] = useState('Видимо нашльокан текст.')\n\n    return <div className=\"ShloKontainer\">\n        <div>\n            <h4>Текст на кирилица</h4>\n            <textarea rows=\"6\" cols=\"80\" value={content} onChange={(event) => setContent(event.target.value)} className=\"textareata\" />\n        </div>\n        <div>\n            <h4>Tekst na 6lyokavica</h4>\n            <div className=\"shlokResult\">\n                {nashlok(content)}\n            </div>\n        </div>\n\n    </div>\n}\n","import React from 'react';\nimport './App.css';\nimport logo from './assets/KIRILICATA.png'\nimport { ShloKontainer } from './shlokontainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h3>Шлокавица транслитератор</h3>\n      <header className=\"App-header\">\n        <div className=\"App-logo\" >\n          <img src={logo} alt=\"logo\" />\n        </div>\n      </header>\n      <ShloKontainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}